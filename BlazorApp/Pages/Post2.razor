@page "/posts2/{url}"
@using BlazorApp.Data
@using BlazorApp.Service
@using BlazorApp.Theme.Service
@inject BlogService BlogService
@inject ThemeService ThemeService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@* @layout mLayout.ToString() *@
<LayoutView Layout=@mLayout ChildContent=GetContent></LayoutView>

<input type="text" @bind="textInput" title="title" />
<p>You entered: @textInput</p>


<p>selectId: @selectThemeType</p>


<select  @onchange="OnThemeChange">
    @foreach (var themeData in ThemeService.BlogPostsThemes)
    {
        <option value="@themeData.ThemeType">@themeData.ThemeType</option>
    }
</select>

@if (blogPost == null)
{
    <span>Fetching the blog post failed...</span>
}
else
{
    @if (HasXss)
    {
        @_postHtmlContent.ToString()
    }
    else
    {
        @_postHtmlContent
    }
}

@code {

    private ThemeType selectThemeType;


    private async Task OnThemeChange(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (value == null)
            return;

        if (Enum.TryParse<ThemeType>(value, out var result) == false)
            return;


        selectThemeType = result;
        ThemeService.CurrentTheme = selectThemeType;
       

        await SaveTheme();

        mLayout = ThemeService.GetPostTheme(selectThemeType).Theme;
        // 强刷下
        StateHasChanged();
    }


    private BlogPost? blogPost;

    [Parameter]
    public string Url { get; set; } = string.Empty;

    [Parameter]
    public string theme { get; set; } = string.Empty;

    public System.Type mLayout = typeof(object);

    private bool HasXss { get; set; }

    private MarkupString _postHtmlContent;

    private string content;

    private string DoctorWhoLayout;

    private Type[] types;


    protected override void OnInitialized()
    {
        blogPost = BlogService.GetBlogPost(Url);
        if (blogPost == null) return;

        var htmlData = Markdig.Markdown.ToHtml(blogPost.Content);

        if (htmlData.Contains("<script") || htmlData.Contains("<link"))
        {
            HasXss = true;
        }
        _postHtmlContent = (MarkupString)htmlData;

        content = _postHtmlContent.ToString();

        mLayout = ThemeService.GetPostTheme(ThemeService.CurrentTheme).Theme;


    }
    protected override async Task OnInitializedAsync()
    {
       

    }

    [JSInvokable]
    public void InvokeAsync(string type, string key, string value, string url, string storageArea)
    {
        // 处理 storage 事件
        Console.WriteLine($"Storage event: Type={type}, Key={key}, Value={value}, URL={url}, StorageArea={storageArea}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        selectThemeType = await ReadTheme();

        try
        {
            // 注册事件监听器
            await JSRuntime.InvokeVoidAsync("window.addEventListener", "storage", DotNetObjectReference.Create(this));
        }
        catch (Exception e)
        {

            Console.WriteLine(e);
        }
    }


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    private void GetContent(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder)
    {
        builder.AddContent(1, _postHtmlContent);
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }


    private const string THEME_KEY = "theme_key";

    private async Task SaveTheme()
    {
        await JSRuntime.SetLocalStorage(THEME_KEY, selectThemeType);
    }

    private async ValueTask<ThemeType> ReadTheme()
    {
        var result = await JSRuntime.GetLocalStorage(THEME_KEY, selectThemeType.ToString());

        // return (ThemeType)result;

        if (Enum.TryParse(result.ToString(), out ThemeType type) == false)
        {
            type = selectThemeType;
        }
        return type;
    }

    public string textInput;
}